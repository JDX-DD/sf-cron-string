import { createElement } from "@lwc/engine-dom";
import CronSelectionComponent from "c/cronSelectionComponent";
import { SELECTION_TYPE } from "c/cronUtil";

describe("c-cron-selection-component", () => {
  afterEach(() => {
    // The jsdom instance is shared across test cases in a single file so reset the DOM
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });

  it("TODO: test case generated by CLI command, please fill in test logic", () => {
    // Arrange
    const element = createElement("c-cron-selection-component", {
      is: CronSelectionComponent
    });

    // Act
    element.selectionTypes = [
      SELECTION_TYPE.ALL,
      SELECTION_TYPE.RANGE,
      SELECTION_TYPE.LIST,
      SELECTION_TYPE.INCREMENT
    ];
    element.unitType = "Year";
    element.unitRange = Array.from({ length: 130 }, (_, i) => 1970 + i);
    document.body.appendChild(element);

    // Assert
    // const div = element.shadowRoot.querySelector('div');
    expect(1).toBe(1);
  });

  it("Verifies All Years Inputs", async () => {
    // Arrange
    const element = createElement("c-cron-selection-component", {
      is: CronSelectionComponent
    });
    element.selectionTypes = [
      SELECTION_TYPE.ALL,
      SELECTION_TYPE.RANGE,
      SELECTION_TYPE.LIST,
      SELECTION_TYPE.INCREMENT
    ];
    element.unitType = "Year";
    element.unitRange = Array.from({ length: 130 }, (_, i) => 1970 + i);
    document.body.appendChild(element);

    // Act
    const selectionTypePicklist = element.shadowRoot.querySelector(
      'lightning-combobox[data-id="selection_type_picklist"]'
    );
    selectionTypePicklist.value = SELECTION_TYPE.ALL;
    selectionTypePicklist.dispatchEvent(
      new CustomEvent("change", { detail: { value: SELECTION_TYPE.ALL } })
    );
    await Promise.resolve();

    // Assert
    const pl1Picklist = element.shadowRoot.querySelector(
      'lightning-combobox[data-id="pl1_picklist"]'
    );
    const pl2Picklist = element.shadowRoot.querySelector(
      'lightning-combobox[data-id="pl2_picklist"]'
    );
    const numInput = element.shadowRoot.querySelector(
      'lightning-input[data-id="num_input"]'
    );
    const plListPicklist = element.shadowRoot.querySelector(
      'lightning-input[data-id="list_picklist"]'
    );
    const listButton = element.shadowRoot.querySelector(
      'lightning-input[data-id="list_button"]'
    );
    expect(pl1Picklist).toBeNull();
    expect(pl2Picklist).toBeNull();
    expect(numInput).toBeNull();
    expect(plListPicklist).toBeNull();
    expect(listButton).toBeNull();
  });

  it("Verifies Range of Years Inputs", async () => {
    // Arrange
    const element = createElement("c-cron-selection-component", {
      is: CronSelectionComponent
    });
    element.selectionTypes = [
      SELECTION_TYPE.ALL,
      SELECTION_TYPE.RANGE,
      SELECTION_TYPE.LIST,
      SELECTION_TYPE.INCREMENT
    ];
    element.unitType = "Year";
    element.unitRange = Array.from({ length: 130 }, (_, i) => 1970 + i);
    document.body.appendChild(element);

    // Act
    const selectionTypePicklist = element.shadowRoot.querySelector(
      'lightning-combobox[data-id="selection_type_picklist"]'
    );
    selectionTypePicklist.value = SELECTION_TYPE.ALL;
    selectionTypePicklist.dispatchEvent(
      new CustomEvent("change", { detail: { value: SELECTION_TYPE.RANGE } })
    );
    await Promise.resolve();

    // Assert
    const pl1Picklist = element.shadowRoot.querySelector(
      'lightning-combobox[data-id="pl1_picklist"]'
    );
    const pl2Picklist = element.shadowRoot.querySelector(
      'lightning-combobox[data-id="pl2_picklist"]'
    );
    const numInput = element.shadowRoot.querySelector(
      'lightning-input[data-id="num_input"]'
    );
    const plListPicklist = element.shadowRoot.querySelector(
      'lightning-input[data-id="list_picklist"]'
    );
    const listButton = element.shadowRoot.querySelector(
      'lightning-input[data-id="list_button"]'
    );
    expect(pl1Picklist).not.toBeNull();
    expect(pl2Picklist).not.toBeNull();
    expect(numInput).toBeNull();
    expect(plListPicklist).toBeNull();
    expect(listButton).toBeNull();
  });

  it("Verifies List of Years Inputs", async () => {
    // Arrange
    const element = createElement("c-cron-selection-component", {
      is: CronSelectionComponent
    });
    element.selectionTypes = [
      SELECTION_TYPE.ALL,
      SELECTION_TYPE.RANGE,
      SELECTION_TYPE.LIST,
      SELECTION_TYPE.INCREMENT
    ];
    element.unitType = "Year";
    element.unitRange = Array.from({ length: 130 }, (_, i) => 1970 + i);
    document.body.appendChild(element);

    // Act
    const selectionTypePicklist = element.shadowRoot.querySelector(
      'lightning-combobox[data-id="selection_type_picklist"]'
    );
    selectionTypePicklist.value = SELECTION_TYPE.ALL;
    selectionTypePicklist.dispatchEvent(
      new CustomEvent("change", { detail: { value: SELECTION_TYPE.LIST } })
    );
    await Promise.resolve();

    // Assert
    const pl1Picklist = element.shadowRoot.querySelector(
      'lightning-combobox[data-id="pl1_picklist"]'
    );
    const pl2Picklist = element.shadowRoot.querySelector(
      'lightning-combobox[data-id="pl2_picklist"]'
    );
    const numInput = element.shadowRoot.querySelector(
      'lightning-input[data-id="num_input"]'
    );
    const plListPicklist = element.shadowRoot.querySelector(
      'lightning-combobox[data-id="list_picklist"]'
    );
    const listButton = element.shadowRoot.querySelector(
      'lightning-button[data-id="list_button"]'
    );
    expect(pl1Picklist).toBeNull();
    expect(pl2Picklist).toBeNull();
    expect(numInput).toBeNull();
    expect(plListPicklist).not.toBeNull();
    expect(listButton).not.toBeNull();
  });

  it("Verifies Increment Years Inputs", async () => {
    // Arrange
    const element = createElement("c-cron-selection-component", {
      is: CronSelectionComponent
    });
    element.selectionTypes = [
      SELECTION_TYPE.ALL,
      SELECTION_TYPE.RANGE,
      SELECTION_TYPE.LIST,
      SELECTION_TYPE.INCREMENT
    ];
    element.unitType = "Year";
    element.unitRange = Array.from({ length: 130 }, (_, i) => 1970 + i);
    document.body.appendChild(element);

    // Act
    const selectionTypePicklist = element.shadowRoot.querySelector(
      'lightning-combobox[data-id="selection_type_picklist"]'
    );
    selectionTypePicklist.value = SELECTION_TYPE.ALL;
    selectionTypePicklist.dispatchEvent(
      new CustomEvent("change", { detail: { value: SELECTION_TYPE.INCREMENT } })
    );
    await Promise.resolve();

    // Assert
    const pl1Picklist = element.shadowRoot.querySelector(
      'lightning-combobox[data-id="pl1_picklist"]'
    );
    const pl2Picklist = element.shadowRoot.querySelector(
      'lightning-combobox[data-id="pl2_picklist"]'
    );
    const numInput = element.shadowRoot.querySelector(
      'lightning-input[data-id="num_input"]'
    );
    const plListPicklist = element.shadowRoot.querySelector(
      'lightning-input[data-id="list_picklist"]'
    );
    const listButton = element.shadowRoot.querySelector(
      'lightning-input[data-id="list_button"]'
    );
    expect(pl1Picklist).not.toBeNull();
    expect(pl2Picklist).toBeNull();
    expect(numInput).not.toBeNull();
    expect(plListPicklist).toBeNull();
    expect(listButton).toBeNull();
  });
});
