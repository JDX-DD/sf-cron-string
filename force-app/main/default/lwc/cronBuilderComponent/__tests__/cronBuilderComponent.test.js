import { createElement } from "@lwc/engine-dom";
import CronBuilderComponent from "c/cronBuilderComponent";

describe("c-cron-builder-component", () => {
  afterEach(() => {
    // The jsdom instance is shared across test cases in a single file so reset the DOM
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });

  it("TODO: test case generated by CLI command, please fill in test logic", () => {
    // Arrange
    const element = createElement("c-cron-builder-component", {
      is: CronBuilderComponent
    });

    // Act
    document.body.appendChild(element);

    // Assert
    // const div = element.shadowRoot.querySelector('div');
    expect(1).toBe(1);
  });

  it("The component should render the correct initial state of the Cron String.", () => {
    // Arrange
    const element = createElement("c-cron-builder-component", {
      is: CronBuilderComponent
    });

    // Act
    document.body.appendChild(element);

    // Assert
    const cronString =
      element.shadowRoot.querySelector(".strong-border").textContent;
    expect(cronString).toBe("0 0 ? ? ? ? ?");
  });

  it("The component should update the Cron String when a year is selected.", () => {
    // Arrange
    const element = createElement("c-cron-builder-component", {
      is: CronBuilderComponent
    });
    document.body.appendChild(element);

    const yearSelectionComponent = element.shadowRoot.querySelector(
      'c-cron-selection-component[data-id="year_selection_component"]'
    );

    // Act
    const cronChangeEvent = new CustomEvent("cronchange", {
      detail: "2023"
    });
    yearSelectionComponent.dispatchEvent(cronChangeEvent);

    // Assert
    return Promise.resolve().then(() => {
      const cronString =
        element.shadowRoot.querySelector(".strong-border").textContent;
      expect(cronString).toBe("0 0 ? ? ? ? 2023");
    });
  });

  it("The component should update the Cron String when a month is selected.", () => {
    // Arrange
    const element = createElement("c-cron-builder-component", {
      is: CronBuilderComponent
    });
    document.body.appendChild(element);

    const monthSelectionComponent = element.shadowRoot.querySelector(
      'c-cron-selection-component[data-id="month_selection_component"]'
    );

    // Act
    const cronChangeEvent = new CustomEvent("cronchange", {
      detail: "JAN"
    });
    monthSelectionComponent.dispatchEvent(cronChangeEvent);

    // Assert
    return Promise.resolve().then(() => {
      const cronString =
        element.shadowRoot.querySelector(".strong-border").textContent;
      expect(cronString).toBe("0 0 ? ? JAN ? ?");
    });
  });

  it("The component should update the Cron String when a week day is selected.", () => {
    // Arrange
    const element = createElement("c-cron-builder-component", {
      is: CronBuilderComponent
    });
    document.body.appendChild(element);

    const dayTypePicklist = element.shadowRoot.querySelector(
      'lightning-combobox[data-id="day_type_selection"]'
    );
    const dayTypeChangeEvent = new CustomEvent("change", {
      detail: {
        value: "WeekDay"
      }
    });
    dayTypePicklist.dispatchEvent(dayTypeChangeEvent);
    return Promise.resolve().then(() => {
      const weekDaySelectionComponent = element.shadowRoot.querySelector(
        'c-cron-selection-component[data-id="weekday_selection_component"]'
      );

      // Act
      const cronChangeEvent = new CustomEvent("cronchange", {
        detail: "MON"
      });
      weekDaySelectionComponent.dispatchEvent(cronChangeEvent);

      // Assert
      return Promise.resolve().then(() => {
        const cronString =
          element.shadowRoot.querySelector(".strong-border").textContent;
        expect(cronString).toBe("0 0 ? ? ? MON ?");
      });
    });
  });

  it("The component should update the Cron String when a day is selected.", () => {
    // Arrange
    const element = createElement("c-cron-builder-component", {
      is: CronBuilderComponent
    });
    document.body.appendChild(element);

    const dayTypePicklist = element.shadowRoot.querySelector(
      'lightning-combobox[data-id="day_type_selection"]'
    );
    const dayTypeChangeEvent = new CustomEvent("change", {
      detail: {
        value: "MonthDay"
      }
    });
    dayTypePicklist.dispatchEvent(dayTypeChangeEvent);
    return Promise.resolve().then(() => {
      const daySelectionComponent = element.shadowRoot.querySelector(
        'c-cron-selection-component[data-id="day_selection_component"]'
      );

      // Act
      const cronChangeEvent = new CustomEvent("cronchange", {
        detail: "1"
      });
      daySelectionComponent.dispatchEvent(cronChangeEvent);

      // Assert
      return Promise.resolve().then(() => {
        const cronString =
          element.shadowRoot.querySelector(".strong-border").textContent;
        expect(cronString).toBe("0 0 ? 1 ? ? ?");
      });
    });
  });

  it("The component should update the Cron String when an hour is selected.", () => {
    // Arrange
    const element = createElement("c-cron-builder-component", {
      is: CronBuilderComponent
    });
    document.body.appendChild(element);

    const hourSelectionComponent = element.shadowRoot.querySelector(
      'c-cron-selection-component[data-id="hour_selection_component"]'
    );

    // Act
    const cronChangeEvent = new CustomEvent("cronchange", {
      detail: "1"
    });
    hourSelectionComponent.dispatchEvent(cronChangeEvent);

    // Assert
    return Promise.resolve().then(() => {
      const cronString =
        element.shadowRoot.querySelector(".strong-border").textContent;
      expect(cronString).toBe("0 0 1 ? ? ? ?");
    });
  });

  it("The component should update the Cron String when a minute is selected.", () => {
    // Arrange
    const element = createElement("c-cron-builder-component", {
      is: CronBuilderComponent
    });
    document.body.appendChild(element);

    const minuteSelectionComponent = element.shadowRoot.querySelector(
      'lightning-combobox[data-id="minute_selection"]'
    );

    // Act
    const cronChangeEvent = new CustomEvent("change", {
      detail: {
        value: "1"
      }
    });
    minuteSelectionComponent.dispatchEvent(cronChangeEvent);

    // Assert
    return Promise.resolve().then(() => {
      const cronString =
        element.shadowRoot.querySelector(".strong-border").textContent;
      expect(cronString).toBe("0 1 ? ? ? ? ?");
    });
  });

  it("The component should update the Cron String when a second is selected.", () => {
    // Arrange
    const element = createElement("c-cron-builder-component", {
      is: CronBuilderComponent
    });
    document.body.appendChild(element);

    const secondSelectionComponent = element.shadowRoot.querySelector(
      'lightning-combobox[data-id="second_selection"]'
    );

    // Act
    const cronChangeEvent = new CustomEvent("change", {
      detail: {
        value: "1"
      }
    });
    secondSelectionComponent.dispatchEvent(cronChangeEvent);

    // Assert
    return Promise.resolve().then(() => {
      const cronString =
        element.shadowRoot.querySelector(".strong-border").textContent;
      expect(cronString).toBe("1 0 ? ? ? ? ?");
    });
  });
});
